(function(g){function e(){var a=STACKTOP;STACKTOP+=8;_memset(a,0,8);var b;_gettimeofday(a,0);b=HEAP[a];b=HEAP[a+4]+b*1E6;STACKTOP=a;return b}function b(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e,f;c=a;f=_PyObject_Call(HEAP[c+24],HEAP[u],0);var g=c;b=f==0?1:2;break;case 1:_PyErr_WriteUnraisable(HEAP[g+24]);d=0;b=10;break;case 2:var h=f;b=HEAP[g+28]>0?3:4;break;case 3:e=_PyLong_AsLongLong(h);b=5;break;case 4:b=_PyFloat_AsDouble(h);e=cRound(b*
4294967296);b=5;break;case 5:HEAP[f]-=1;b=HEAP[f]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[f+4]+24]](f);b=7;break;case 7:b=_PyErr_Occurred()!=0?8:9;break;case 8:_PyErr_WriteUnraisable(HEAP[c+24]);d=0;b=10;break;case 9:d=e;b=10;break;case 10:return a=d;default:assert(0,"bad label: "+b)}}function a(a){var b,c=null;for(b=-1;;)switch(b){case -1:var d;d=a;p(HEAP[d+8],g+4,0);HEAP[d+8]=0;b=HEAP[d+12]!=0?1:2;break;case 1:_free(HEAP[d+12]);HEAP[d+12]=0;b=2;break;case 2:var e=d+16;HEAP[d+16]!=0?(c=2,b=
3):(c=2,b=4);break;case 3:b=HEAP[c==3?f:e];HEAP[d+16]=HEAP[b+16];_free(b);var f=d+16;HEAP[d+16]!=0?b=c=3:(c=3,b=4);break;case 4:HEAP[c==2?e:f]=0;return;default:assert(0,"bad label: "+b)}}function c(a,c,d){var f;for(f=-1;;)switch(f){case -1:var g,h,j,k,l,m,n;g=a;h=c;j=d;f=HEAP[g+24]!=0?1:2;break;case 1:k=b(g);f=3;break;case 2:k=e();f=3;break;case 3:l=k-HEAP[h];m=l-HEAP[h+8];f=HEAP[h+16]!=0?4:5;break;case 4:HEAP[HEAP[h+16]+8]=l+HEAP[HEAP[h+16]+8];f=5;break;case 5:HEAP[g+12]=HEAP[h+16];HEAP[j+40]-=1;
var p=j;f=HEAP[j+40]==0?6:7;break;case 6:HEAP[j+16]=l+HEAP[p+16];f=8;break;case 7:HEAP[j+36]=HEAP[p+36]+1;f=8;break;case 8:HEAP[j+24]=m+HEAP[j+24];HEAP[j+32]+=1;f=(HEAP[g+20]&2)!=0?9:15;break;case 9:f=HEAP[h+16]!=0?10:15;break;case 10:f=HEAP[HEAP[h+16]+20];n=o(f+44,j);f=n!=0?11:15;break;case 11:HEAP[n+36]-=1;var q=n;f=HEAP[n+36]==0?12:13;break;case 12:HEAP[n+12]=l+HEAP[q+12];f=14;break;case 13:HEAP[n+32]=HEAP[q+32]+1;f=14;break;case 14:HEAP[n+20]=m+HEAP[n+20];HEAP[n+28]+=1;f=15;break;case 15:return;
default:assert(0,"bad label: "+f)}}function d(a,c,d){var f=STACKTOP;STACKTOP+=12;_memset(f,0,12);var g;for(g=-1;;)switch(g){case -1:var h,j,k,l,m,p=f,q=f+4,r=f+8;h=a;j=c;k=d;_PyErr_Fetch(p,q,r);l=o(h+8,j);g=l==0?1:2;break;case 1:a:{l=h;g=j;for(var u=k,B=void 0,B=-1;;)switch(B){case -1:var x,H,y,F,N;x=l;H=g;y=u;N=_malloc(48);B=N==0?1:2;break;case 1:HEAP[x+20]|=256;F=0;B=5;break;case 2:b:{B=void 0;for(B=-1;;)switch(B){case -1:var z,A,Q,K,U,W,C,I,D,ba=z=y,B=HEAP[z+4]!=_PyCFunction_Type?1:2;break;case 1:HEAP[z]=
HEAP[ba]+1;A=z;B=26;break;case 2:var E=Q=ba,B=HEAP[Q+12]==0?3:15;break;case 3:K=HEAP[E+16];B=K==0?11:4;break;case 4:var Y=K,B=(HEAP[HEAP[K+4]+84]&134217728)==0?6:5;break;case 5:U=Y+20;B=12;break;case 6:B=Y==0?11:7;break;case 7:B=HEAP[K+4]==_PyModule_Type?9:8;break;case 8:B=_PyType_IsSubtype(HEAP[K+4],_PyModule_Type)!=0?9:11;break;case 9:U=B=_PyModule_GetName(K);B=B==0?10:12;break;case 10:_PyErr_Clear();U=s;B=12;break;case 11:U=s;B=12;break;case 12:var B=_strcmp(U,s),J=HEAP[HEAP[Q+8]],B=B!=0?13:14;
break;case 13:A=_PyString_FromFormat(t,allocate([U,0,0,0,J,0,0,0],["i8*",0,0,0,"i8*",0,0,0],ALLOC_STACK));B=26;break;case 14:A=_PyString_FromFormat(v,allocate([J,0,0,0],["i8*",0,0,0],ALLOC_STACK));B=26;break;case 15:W=HEAP[E+12];C=_PyString_FromString(HEAP[HEAP[Q+8]]);B=C!=0?16:25;break;case 16:I=__PyType_Lookup(HEAP[W+4],C);B=I!=0?17:18;break;case 17:HEAP[I]+=1;B=18;break;case 18:HEAP[C]-=1;B=HEAP[C]==0?19:20;break;case 19:FUNCTION_TABLE[HEAP[HEAP[C+4]+24]](C);B=20;break;case 20:B=I!=0?21:25;break;
case 21:D=_PyObject_Repr(I);HEAP[I]-=1;B=HEAP[I]==0?22:23;break;case 22:FUNCTION_TABLE[HEAP[HEAP[I+4]+24]](I);B=23;break;case 23:B=D!=0?24:25;break;case 24:A=D;B=26;break;case 25:_PyErr_Clear();A=_PyString_FromFormat(w,allocate([HEAP[HEAP[Q+8]],0,0,0],["i8*",0,0,0],ALLOC_STACK));B=26;break;case 26:y=A;break b;default:assert(0,"bad label: "+B)}y=void 0}B=y==0?3:4;break;case 3:_PyErr_Clear();_free(N);HEAP[x+20]|=256;F=0;B=5;break;case 4:HEAP[N]=H;HEAP[N+12]=y;HEAP[N+16]=0;HEAP[N+24]=0;HEAP[N+32]=0;
HEAP[N+36]=0;HEAP[N+40]=0;HEAP[N+44]=0;n(x+8,N);F=N;B=5;break;case 5:l=F;break a;default:assert(0,"bad label: "+B)}l=void 0}g=l==0?7:2;break;case 2:m=HEAP[h+16];g=HEAP[h+16]!=0?3:4;break;case 3:HEAP[h+16]=HEAP[m+16];g=6;break;case 4:m=_malloc(24);g=m==0?5:6;break;case 5:HEAP[h+20]|=256;g=7;break;case 6:a:{g=h;for(var u=m,B=l,G=void 0,G=-1;;)switch(G){case -1:var M,Z,V,Da,L,fa;M=g;Z=u;V=B;HEAP[Z+20]=V;HEAP[Z+8]=0;HEAP[Z+16]=HEAP[M+12];HEAP[M+12]=Z;HEAP[V+40]+=1;G=(HEAP[M+20]&2)!=0?1:5;break;case 1:G=
HEAP[Z+16]!=0?2:5;break;case 2:L=HEAP[HEAP[Z+16]+20];fa=o(L+44,V);G=fa==0?3:4;break;case 3:b:{fa=M;for(var G=L,Wa=V,R=void 0,R=-1;;)switch(R){case -1:var Ea,Ia,ha,la,ja;Ea=fa;Ia=G;ha=Wa;ja=_malloc(40);R=ja==0?1:2;break;case 1:HEAP[Ea+20]|=256;la=0;R=3;break;case 2:HEAP[ja]=ha;HEAP[ja+12]=0;HEAP[ja+20]=0;HEAP[ja+28]=0;HEAP[ja+32]=0;HEAP[ja+36]=0;n(Ia+44,ja);la=ja;R=3;break;case 3:G=fa=la;break b;default:assert(0,"bad label: "+R)}G=void 0}fa=G;G=G!=0?4:5;break;case 4:HEAP[fa+36]+=1;G=5;break;case 5:G=
HEAP[M+24]!=0?6:7;break;case 6:Da=b(M);G=8;break;case 7:Da=e();G=8;break;case 8:HEAP[Z]=Da;break a;default:assert(0,"bad label: "+G)}}g=7;break;case 7:_PyErr_Restore(HEAP[p],HEAP[q],HEAP[r]);STACKTOP=f;return;default:assert(0,"bad label: "+g)}}function f(a,b){var d;for(d=-1;;)switch(d){case -1:var e,f,g,h;d=a;e=b;f=d;h=HEAP[f+12];d=h==0?5:1;break;case 1:g=o(f+8,e);d=g!=0?2:3;break;case 2:c(f,h,g);d=4;break;case 3:HEAP[f+12]=HEAP[h+16];d=4;break;case 4:HEAP[h+16]=HEAP[f+16];HEAP[f+16]=h;d=5;break;
case 5:return;default:assert(0,"bad label: "+d)}}function h(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=(HEAP[c+20]&256)!=0?1:2;break;case 1:HEAP[c+20]-=256;_PyErr_SetString(HEAP[_PyExc_MemoryError],x);d=-1;b=3;break;case 2:d=0;b=3;break;case 3:return a=d;default:assert(0,"bad label: "+b)}}function j(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;d=a;e=b;c=e==0?1:2;break;case 1:HEAP[d+20]&=-3;c=4;break;case 2:c=e>0?3:4;break;case 3:HEAP[d+20]|=2;c=4;break;case 4:return 0;default:assert(0,
"bad label: "+c)}}function k(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e;d=a;e=b;c=e==0?1:2;break;case 1:HEAP[d+20]&=-5;c=4;break;case 2:c=e>0?3:4;break;case 3:HEAP[d+20]|=4;c=4;break;case 4:return 0;default:assert(0,"bad label: "+c)}}function l(a){var b;for(b=-1;;)switch(b){case -1:var d,e,f;d=a;b=HEAP[d+12]!=0?1:7;break;case 1:e=HEAP[d+12];f=HEAP[e+20];b=HEAP[e+20]!=0?2:3;break;case 2:c(d,e,f);b=4;break;case 3:HEAP[d+12]=HEAP[e+16];b=4;break;case 4:b=e!=0?6:5;break;case 5:b=HEAP[d+12]!=0?1:
7;break;case 6:_free(e);b=5;break;case 7:return;default:assert(0,"bad label: "+b)}}function m(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=1<<c>HEAP[ua]?1:2;break;case 1:HEAP[ja]*=1082527;HEAP[ua]=HEAP[ja];b=2;break;case 2:return a=(1<<c)-1&HEAP[ua],HEAP[ua]>>>=c,c=a;default:assert(0,"bad label: "+b)}}function n(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f;e=a;var g=f=b;HEAP[e]!=0?(d=-1,c=1):(d=-1,c=5);break;case 1:var h=HEAP[e];c=HEAP[d==3?j:g]<HEAP[HEAP[e]]?2:4;break;case 2:e=h+4;
c=3;break;case 3:var j=f;HEAP[e]!=0?(d=3,c=1):(d=3,c=5);break;case 4:e=h+8;c=3;break;case 5:HEAP[(d==-1?g:j)+4]=0;HEAP[f+8]=0;HEAP[e]=f;return;default:assert(0,"bad label: "+c)}}function o(a,b){var c,d=null;for(c=-1;;)switch(c){case -1:var e,f,g,h,j,k,l,n;e=a;f=b;c=m(3);c=c!=4?1:9;break;case 1:var o=HEAP[e];h=o;d=1;c=7;break;case 2:var p=h;c=HEAP[h]==f?3:4;break;case 3:g=p;c=25;break;case 4:var q=h;c=HEAP[p]>f?5:6;break;case 5:var r=HEAP[q+4];h=r;d=5;c=7;break;case 6:var s=HEAP[q+8];h=s;d=6;c=7;break;
case 7:c=(d==1?o:d==6?s:r)!=0?2:8;break;case 8:g=0;c=25;break;case 9:j=e;k=HEAP[j];c=k==0?10:11;break;case 10:g=0;c=25;break;case 11:c=HEAP[k]==f?12:13;break;case 12:g=k;c=25;break;case 13:n=m(1)==0;var t=k;c=HEAP[k]>f?14:19;break;case 14:l=HEAP[t+4];c=l==0?15:16;break;case 15:g=0;c=25;break;case 16:c=n!=0?17:18;break;case 17:HEAP[k+4]=HEAP[l+8];HEAP[l+8]=k;HEAP[j]=l;c=24;break;case 18:j=k+4;c=24;break;case 19:l=HEAP[t+8];c=l==0?20:21;break;case 20:g=0;c=25;break;case 21:c=n!=0?22:23;break;case 22:HEAP[k+
8]=HEAP[l+4];HEAP[l+4]=k;HEAP[j]=l;c=24;break;case 23:j=k+8;c=24;break;case 24:k=l;c=11;break;case 25:return d=g;default:assert(0,"bad label: "+c)}}function p(a,b,c){var d,e=null;for(d=-1;;)switch(d){case -1:var f,g,h,j,k,l;f=a;g=b;h=c;e=-1;d=6;break;case 1:k=p(HEAP[f+4],g,h);d=k!=0?2:3;break;case 2:j=k;d=8;break;case 3:l=HEAP[f+8];k=FUNCTION_TABLE[g](f,h);d=k!=0?4:5;break;case 4:j=k;d=8;break;case 5:var m=l;f=m;e=5;d=6;break;case 6:d=(e==5?m:a)!=0?1:7;break;case 7:j=0;d=8;break;case 8:return a=j;
default:assert(0,"bad label: "+d)}}function q(){u=allocate(1,"%struct.PyObject*",ALLOC_NORMAL);s=allocate([95,95,98,117,105,108,116,105,110,95,95,0],"i8",ALLOC_NORMAL);t=allocate([60,37,115,46,37,115,62,0],"i8",ALLOC_NORMAL);v=allocate([60,37,115,62,0],"i8",ALLOC_NORMAL);w=allocate([60,98,117,105,108,116,45,105,110,32,109,101,116,104,111,100,32,37,115,62,0],"i8",ALLOC_NORMAL);x=allocate([109,101,109,111,114,121,32,119,97,115,32,101,120,104,97,117,115,116,101,100,32,119,104,105,108,101,32,112,114,
111,102,105,108,105,110,103,0],"i8",ALLOC_NORMAL);y=allocate([99,111,100,101,0],"i8",ALLOC_NORMAL);z=allocate([99,111,100,101,32,111,98,106,101,99,116,32,111,114,32,98,117,105,108,116,45,105,110,32,102,117,110,99,116,105,111,110,32,110,97,109,101,0],"i8",ALLOC_NORMAL);C=allocate([99,97,108,108,99,111,117,110,116,0],"i8",ALLOC_NORMAL);A=allocate([104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,116,104,105,115,32,119,97,115,32,99,97,108,108,101,100,0],"i8",ALLOC_NORMAL);G=allocate([114,101,
99,99,97,108,108,99,111,117,110,116,0],"i8",ALLOC_NORMAL);E=allocate([104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,99,97,108,108,101,100,32,114,101,99,117,114,115,105,118,101,108,121,0],"i8",ALLOC_NORMAL);D=allocate([116,111,116,97,108,116,105,109,101,0],"i8",ALLOC_NORMAL);R=allocate([116,111,116,97,108,32,116,105,109,101,32,105,110,32,116,104,105,115,32,101,110,116,114,121,0],"i8",ALLOC_NORMAL);M=allocate([105,110,108,105,110,101,116,105,109,101,0],"i8",ALLOC_NORMAL);L=allocate([105,110,
108,105,110,101,32,116,105,109,101,32,105,110,32,116,104,105,115,32,101,110,116,114,121,32,40,110,111,116,32,105,110,32,115,117,98,99,97,108,108,115,41,0],"i8",ALLOC_NORMAL);I=allocate([99,97,108,108,115,0],"i8",ALLOC_NORMAL);J=allocate([100,101,116,97,105,108,115,32,111,102,32,116,104,101,32,99,97,108,108,115,0],"i8",ALLOC_NORMAL);F=allocate(56,["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,
0,0,"i8","i8","i8","i8"],ALLOC_NORMAL);V=allocate([99,97,108,108,101,100,32,99,111,100,101,32,111,98,106,101,99,116,32,111,114,32,98,117,105,108,116,45,105,110,32,102,117,110,99,116,105,111,110,32,110,97,109,101,0],"i8",ALLOC_NORMAL);Q=allocate([104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,116,104,105,115,32,105,115,32,99,97,108,108,101,100,0],"i8",ALLOC_NORMAL);Z=allocate([104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,116,104,105,115,32,105,115,32,99,97,108,108,101,100,32,114,
101,99,117,114,115,105,118,101,108,121,0],"i8",ALLOC_NORMAL);K=allocate([116,111,116,97,108,32,116,105,109,101,32,115,112,101,110,116,32,105,110,32,116,104,105,115,32,99,97,108,108,0],"i8",ALLOC_NORMAL);N=allocate([105,110,108,105,110,101,32,116,105,109,101,32,40,110,111,116,32,105,110,32,102,117,114,116,104,101,114,32,115,117,98,99,97,108,108,115,41,0],"i8",ALLOC_NORMAL);H=allocate(48,["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",
0,0,0,"i8*",0,0,0,"i8","i8","i8","i8"],ALLOC_NORMAL);ba=allocate([0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"%struct.PyStructSequence_Field*",0,0,0,"i32",0,0,0],ALLOC_NORMAL);W=allocate([95,108,115,112,114,111,102,46,112,114,111,102,105,108,101,114,95,101,110,116,114,121,0],"i8",ALLOC_NORMAL);B=allocate([0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"%struct.PyStructSequence_Field*",0,0,0,"i32",0,0,0],ALLOC_NORMAL);Y=allocate([95,108,115,112,114,111,102,46,112,114,111,
102,105,108,101,114,95,115,117,98,101,110,116,114,121,0],"i8",ALLOC_NORMAL);fa=allocate(196,["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",
0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,
"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"void (i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32",0,0,0],ALLOC_NORMAL);ha=allocate([40,40,79,108,
108,100,100,41,41,0],"i8",ALLOC_NORMAL);la=allocate(196,["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",
0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",
0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",
0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"void (i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32",0,0,0],ALLOC_NORMAL);ra=allocate([40,40,79,108,108,100,100,79,41,41,0],"i8",ALLOC_NORMAL);ya=allocate([103,101,116,115,116,97,116,115,40,41,32,45,62,32,108,105,115,116,32,111,102,32,112,
114,111,102,105,108,101,114,95,101,110,116,114,121,32,111,98,106,101,99,116,115,10,10,82,101,116,117,114,110,32,97,108,108,32,105,110,102,111,114,109,97,116,105,111,110,32,99,111,108,108,101,99,116,101,100,32,98,121,32,116,104,101,32,112,114,111,102,105,108,101,114,46,10,69,97,99,104,32,112,114,111,102,105,108,101,114,95,101,110,116,114,121,32,105,115,32,97,32,116,117,112,108,101,45,108,105,107,101,32,111,98,106,101,99,116,32,119,105,116,104,32,116,104,101,10,102,111,108,108,111,119,105,110,103,32,
97,116,116,114,105,98,117,116,101,115,58,10,10,32,32,32,32,99,111,100,101,32,32,32,32,32,32,32,32,32,32,99,111,100,101,32,111,98,106,101,99,116,10,32,32,32,32,99,97,108,108,99,111,117,110,116,32,32,32,32,32,104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,116,104,105,115,32,119,97,115,32,99,97,108,108,101,100,10,32,32,32,32,114,101,99,99,97,108,108,99,111,117,110,116,32,32,104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,99,97,108,108,101,100,32,114,101,99,117,114,115,105,118,101,108,
121,10,32,32,32,32,116,111,116,97,108,116,105,109,101,32,32,32,32,32,116,111,116,97,108,32,116,105,109,101,32,105,110,32,116,104,105,115,32,101,110,116,114,121,10,32,32,32,32,105,110,108,105,110,101,116,105,109,101,32,32,32,32,105,110,108,105,110,101,32,116,105,109,101,32,105,110,32,116,104,105,115,32,101,110,116,114,121,32,40,110,111,116,32,105,110,32,115,117,98,99,97,108,108,115,41,10,32,32,32,32,99,97,108,108,115,32,32,32,32,32,32,32,32,32,100,101,116,97,105,108,115,32,111,102,32,116,104,101,32,
99,97,108,108,115,10,10,84,104,101,32,99,97,108,108,115,32,97,116,116,114,105,98,117,116,101,32,105,115,32,101,105,116,104,101,114,32,78,111,110,101,32,111,114,32,97,32,108,105,115,116,32,111,102,10,112,114,111,102,105,108,101,114,95,115,117,98,101,110,116,114,121,32,111,98,106,101,99,116,115,58,10,10,32,32,32,32,99,111,100,101,32,32,32,32,32,32,32,32,32,32,99,97,108,108,101,100,32,99,111,100,101,32,111,98,106,101,99,116,10,32,32,32,32,99,97,108,108,99,111,117,110,116,32,32,32,32,32,104,111,119,32,
109,97,110,121,32,116,105,109,101,115,32,116,104,105,115,32,105,115,32,99,97,108,108,101,100,10,32,32,32,32,114,101,99,99,97,108,108,99,111,117,110,116,32,32,104,111,119,32,109,97,110,121,32,116,105,109,101,115,32,116,104,105,115,32,105,115,32,99,97,108,108,101,100,32,114,101,99,117,114,115,105,118,101,108,121,10,32,32,32,32,116,111,116,97,108,116,105,109,101,32,32,32,32,32,116,111,116,97,108,32,116,105,109,101,32,115,112,101,110,116,32,105,110,32,116,104,105,115,32,99,97,108,108,10,32,32,32,32,105,
110,108,105,110,101,116,105,109,101,32,32,32,32,105,110,108,105,110,101,32,116,105,109,101,32,40,110,111,116,32,105,110,32,102,117,114,116,104,101,114,32,115,117,98,99,97,108,108,115,41,10,0],"i8",ALLOC_NORMAL);Da=allocate([101,110,97,98,108,101,40,115,117,98,99,97,108,108,115,61,84,114,117,101,44,32,98,117,105,108,116,105,110,115,61,84,114,117,101,41,10,10,83,116,97,114,116,32,99,111,108,108,101,99,116,105,110,103,32,112,114,111,102,105,108,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,
46,10,73,102,32,39,115,117,98,99,97,108,108,115,39,32,105,115,32,84,114,117,101,44,32,97,108,115,111,32,114,101,99,111,114,100,115,32,102,111,114,32,101,97,99,104,32,102,117,110,99,116,105,111,110,10,115,116,97,116,105,115,116,105,99,115,32,115,101,112,97,114,97,116,101,100,32,97,99,99,111,114,100,105,110,103,32,116,111,32,105,116,115,32,99,117,114,114,101,110,116,32,99,97,108,108,101,114,46,10,73,102,32,39,98,117,105,108,116,105,110,115,39,32,105,115,32,84,114,117,101,44,32,114,101,99,111,114,100,
115,32,116,104,101,32,116,105,109,101,32,115,112,101,110,116,32,105,110,10,98,117,105,108,116,45,105,110,32,102,117,110,99,116,105,111,110,115,32,115,101,112,97,114,97,116,101,108,121,32,102,114,111,109,32,116,104,101,105,114,32,99,97,108,108,101,114,46,10,0],"i8",ALLOC_NORMAL);Ua=allocate([124,105,105,58,101,110,97,98,108,101,0],"i8",ALLOC_NORMAL);Na=allocate(12,"i8*",ALLOC_NORMAL);Pa=allocate([115,117,98,99,97,108,108,115,0],"i8",ALLOC_NORMAL);wa=allocate([98,117,105,108,116,105,110,115,0],"i8",
ALLOC_NORMAL);Ya=allocate([100,105,115,97,98,108,101,40,41,10,10,83,116,111,112,32,99,111,108,108,101,99,116,105,110,103,32,112,114,111,102,105,108,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0],"i8",ALLOC_NORMAL);Ha=allocate([99,108,101,97,114,40,41,10,10,67,108,101,97,114,32,97,108,108,32,112,114,111,102,105,108,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,32,99,111,108,108,101,99,116,101,100,32,115,111,32,102,97,114,46,10,0],"i8",ALLOC_NORMAL);ta=allocate([124,
79,100,105,105,58,80,114,111,102,105,108,101,114,0],"i8",ALLOC_NORMAL);Va=allocate(20,"i8*",ALLOC_NORMAL);Ia=allocate([116,105,109,101,114,0],"i8",ALLOC_NORMAL);Wa=allocate([116,105,109,101,117,110,105,116,0],"i8",ALLOC_NORMAL);ia=allocate([103,101,116,115,116,97,116,115,0],"i8",ALLOC_NORMAL);Ba=allocate([101,110,97,98,108,101,0],"i8",ALLOC_NORMAL);Xa=allocate([100,105,115,97,98,108,101,0],"i8",ALLOC_NORMAL);Ta=allocate([99,108,101,97,114,0],"i8",ALLOC_NORMAL);Ea=allocate([0,0,0,0,0,0,0,0,4,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Ga=allocate([80,114,111,102,105,108,101,114,40,99,117,115,116,111,109,95,116,105,109,101,114,61,78,111,110,101,44,32,116,105,109,101,95,117,110,105,116,61,78,111,110,101,44,32,115,117,98,99,97,108,108,115,61,84,114,117,101,44,32,98,117,105,108,116,105,110,115,61,84,114,117,101,41,10,10,32,32,32,32,66,117,105,108,100,115,32,97,32,112,114,
111,102,105,108,101,114,32,111,98,106,101,99,116,32,117,115,105,110,103,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,116,105,109,101,114,32,102,117,110,99,116,105,111,110,46,10,32,32,32,32,84,104,101,32,100,101,102,97,117,108,116,32,116,105,109,101,114,32,105,115,32,97,32,102,97,115,116,32,98,117,105,108,116,45,105,110,32,111,110,101,32,98,97,115,101,100,32,111,110,32,114,101,97,108,32,116,105,109,101,46,10,32,32,32,32,70,111,114,32,99,117,115,116,111,109,32,116,105,109,101,114,32,102,
117,110,99,116,105,111,110,115,32,114,101,116,117,114,110,105,110,103,32,105,110,116,101,103,101,114,115,44,32,116,105,109,101,95,117,110,105,116,32,99,97,110,10,32,32,32,32,98,101,32,97,32,102,108,111,97,116,32,115,112,101,99,105,102,121,105,110,103,32,97,32,115,99,97,108,101,32,40,105,46,101,46,32,104,111,119,32,108,111,110,103,32,101,97,99,104,32,105,110,116,101,103,101,114,32,117,110,105,116,10,32,32,32,32,105,115,44,32,105,110,32,115,101,99,111,110,100,115,41,46,10,0],"i8",ALLOC_NORMAL);ka=allocate([95,
108,115,112,114,111,102,46,80,114,111,102,105,108,101,114,0],"i8",ALLOC_NORMAL);Fa=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132587,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,
0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",
0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,
0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",
0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);ma=allocate(16,["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);La=allocate([95,108,115,112,114,111,102,0],"i8",ALLOC_NORMAL);Za=
allocate([70,97,115,116,32,112,114,111,102,105,108,101,114,0],"i8",ALLOC_NORMAL);Ka=allocate([80,114,111,102,105,108,101,114,0],"i8",ALLOC_NORMAL);Ra=allocate(1,"i1",ALLOC_NORMAL);$a=allocate([112,114,111,102,105,108,101,114,95,101,110,116,114,121,0],"i8",ALLOC_NORMAL);Ja=allocate([112,114,111,102,105,108,101,114,95,115,117,98,101,110,116,114,121,0],"i8",ALLOC_NORMAL);ja=allocate([1],["i32",0,0,0,0],ALLOC_NORMAL);ua=allocate(1,"i32",ALLOC_NORMAL);HEAP[F]=y;HEAP[F+4]=z;HEAP[F+8]=C;HEAP[F+12]=A;HEAP[F+
16]=G;HEAP[F+20]=E;HEAP[F+24]=D;HEAP[F+28]=R;HEAP[F+32]=M;HEAP[F+36]=L;HEAP[F+40]=I;HEAP[F+44]=J;HEAP[H]=y;HEAP[H+4]=V;HEAP[H+8]=C;HEAP[H+12]=Q;HEAP[H+16]=G;HEAP[H+20]=Z;HEAP[H+24]=D;HEAP[H+28]=K;HEAP[H+32]=M;HEAP[H+36]=N;HEAP[ba]=W;HEAP[ba+8]=F;HEAP[B]=Y;HEAP[B+8]=H;HEAP[Na]=Pa;HEAP[Na+4]=wa;HEAP[Va]=Ia;HEAP[Va+4]=Wa;HEAP[Va+8]=Pa;HEAP[Va+12]=wa;HEAP[Ea]=ia;HEAP[Ea+4]=g+12;HEAP[Ea+12]=ya;HEAP[Ea+16]=Ba;HEAP[Ea+20]=g+14;HEAP[Ea+28]=Da;HEAP[Ea+32]=Xa;HEAP[Ea+36]=g+16;HEAP[Ea+44]=Ya;HEAP[Ea+48]=Ta;
HEAP[Ea+52]=g+18;HEAP[Ea+60]=Ha;HEAP[Fa+12]=ka;HEAP[Fa+24]=g+20;HEAP[Fa+88]=Ga;HEAP[Fa+116]=Ea;HEAP[Fa+148]=g+22;HEAP[Fa+152]=g+24;HEAP[Fa+156]=g+26;HEAP[Fa+160]=g+28}var r={arguments:[]},u,s,t,v,w,x,y,z,C,A,G,E,D,R,M,L,I,J,F,V,Q,Z,K,N,H,ba,W,B,Y,fa,ha,la,ra,ya,Da,Ua,Na,Pa,wa,Ya,Ha,ta,Va,Ia,Wa,ia,Ba,Xa,Ta,Ea,Ga,ka,Fa,ma,La,Za,Ka,Ra,$a,Ja,ja,ua;r._init_lsprof=function(){var a;for(a=-1;;)switch(a){case -1:var b,c;b=_Py_InitModule4(La,ma,Za,0,1013);a=b==0?5:1;break;case 1:c=_PyModule_GetDict(b);a=_PyType_Ready(Fa)<
0?5:2;break;case 2:_PyDict_SetItemString(c,Ka,Fa);a=HEAP[Ra]==0?3:4;break;case 3:_PyStructSequence_InitType(la,ba);_PyStructSequence_InitType(fa,B);a=4;break;case 4:HEAP[la]+=1;HEAP[fa]+=1;_PyModule_AddObject(b,$a,la);_PyModule_AddObject(b,Ja,fa);a=_PyTuple_New(0);HEAP[u]=a;HEAP[Ra]=1;a=5;break;case 5:return;default:assert(0,"bad label: "+a)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,function(a){_free(a);return 0},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;p(HEAP[c+44],g+2,0);b=HEAP[c+
12];HEAP[b]-=1;b=HEAP[b]==0?1:2;break;case 1:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+12]+4]+24]](HEAP[c+12]);b=2;break;case 2:return _free(c),0;default:assert(0,"bad label: "+b)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,g;c=a;d=b;g=_PyObject_CallFunction(fa,ha,allocate([HEAP[HEAP[c]+12],0,0,0,HEAP[c+28],0,0,0,HEAP[c+32],0,0,0,HEAP[d+8]*HEAP[c+12],0,0,0,0,0,0,0,HEAP[d+8]*HEAP[c+20],0,0,0,0,0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,
0,0,0,0],ALLOC_STACK));c=g==0?1:2;break;case 1:e=-1;c=5;break;case 2:f=_PyList_Append(HEAP[d+4],g);HEAP[g]-=1;c=HEAP[g]==0?3:4;break;case 3:FUNCTION_TABLE[HEAP[HEAP[g+4]+24]](g);c=4;break;case 4:e=f;c=5;break;case 5:return e;default:assert(0,"bad label: "+c)}},0,function(a,b){var c;for(c=-1;;)switch(c){case -1:var d,e,f,h,j;d=a;e=b;c=HEAP[d+32]==0?1:2;break;case 1:f=0;c=17;break;case 2:c=HEAP[d+44]!=0?3:9;break;case 3:c=_PyList_New(0);HEAP[e+4]=c;c=HEAP[e+4]==0?4:5;break;case 4:f=-1;c=17;break;case 5:c=
p(HEAP[d+44],g+6,e)!=0?6:10;break;case 6:c=HEAP[e+4];HEAP[c]-=1;c=HEAP[c]==0?7:8;break;case 7:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+4]+4]+24]](HEAP[e+4]);c=8;break;case 8:f=-1;c=17;break;case 9:HEAP[__Py_NoneStruct]+=1;HEAP[e+4]=__Py_NoneStruct;c=10;break;case 10:h=_PyObject_CallFunction(la,ra,allocate([HEAP[d+12],0,0,0,HEAP[d+32],0,0,0,HEAP[d+36],0,0,0,HEAP[e+8]*HEAP[d+16],0,0,0,0,0,0,0,HEAP[e+8]*HEAP[d+24],0,0,0,0,0,0,0,HEAP[e+4],0,0,0],["%struct.PyObject*",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,
0,0,0,0,0,"double",0,0,0,0,0,0,0,"%struct.PyObject*",0,0,0],ALLOC_STACK));c=HEAP[e+4];HEAP[c]-=1;c=HEAP[c]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[HEAP[e+4]+4]+24]](HEAP[e+4]);c=12;break;case 12:c=h==0?13:14;break;case 13:f=-1;c=17;break;case 14:j=_PyList_Append(HEAP[e],h);HEAP[h]-=1;c=HEAP[h]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);c=16;break;case 16:f=j;c=17;break;case 17:return f;default:assert(0,"bad label: "+c)}},0,function(a,b,c,e){var g;for(g=-1;;)switch(g){case -1:var h,
j,k;h=a;j=b;g=c;k=e;g=g==0?1:g==3?2:g==4?3:g==5?6:g==6?6:9;break;case 1:d(h,HEAP[j+16],HEAP[j+16]);g=9;break;case 2:f(h,HEAP[j+16]);g=9;break;case 3:g=(HEAP[h+20]&4)!=0?4:9;break;case 4:g=HEAP[k+4]==_PyCFunction_Type?5:9;break;case 5:d(h,HEAP[k+8],k);g=9;break;case 6:g=(HEAP[h+20]&4)!=0?7:9;break;case 7:g=HEAP[k+4]==_PyCFunction_Type?8:9;break;case 8:f(h,HEAP[k+8]);g=9;break;case 9:return 0;default:assert(0,"bad label: "+g)}},0,function(a){var b=STACKTOP;STACKTOP+=16;_memset(b,0,16);var c;for(c=-1;;)switch(c){case -1:var d,
e,f=b;d=a;c=h(d)!=0?1:2;break;case 1:e=0;c=14;break;case 2:c=HEAP[d+24]==0?3:4;break;case 3:c=void 0;c=1.0E-6;HEAP[f+8]=c;c=7;break;case 4:c=HEAP[d+28]>0?5:6;break;case 5:HEAP[f+8]=HEAP[d+28];c=7;break;case 6:HEAP[f+8]=2.3283064365386963E-10;c=7;break;case 7:c=_PyList_New(0);HEAP[f]=c;c=HEAP[f]==0?8:9;break;case 8:e=0;c=14;break;case 9:c=p(HEAP[d+8],g+8,f);var j=HEAP[f];c=c!=0?10:13;break;case 10:HEAP[j]-=1;c=HEAP[j]==0?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[HEAP[f]+4]+24]](HEAP[f]);c=12;break;
case 12:e=0;c=14;break;case 13:e=j;c=14;break;case 14:return a=e,STACKTOP=b,a;default:assert(0,"bad label: "+c)}},0,function(a,b,c){var d=STACKTOP;STACKTOP+=8;_memset(d,0,8);var e;for(e=-1;;)switch(e){case -1:var f,h,l,m=d,n=d+4;f=a;e=b;h=c;HEAP[m]=-1;HEAP[n]=-1;e=_PyArg_ParseTupleAndKeywords(e,h,Ua,Na,allocate([m,0,0,0,n,0,0,0],["i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:l=0;e=6;break;case 2:e=j(f,HEAP[m])<0?4:3;break;case 3:e=k(f,HEAP[n])<0?4:5;break;case 4:l=0;e=6;break;case 5:_PyEval_SetProfile(g+
10,f);HEAP[f+20]|=1;HEAP[__Py_NoneStruct]+=1;l=__Py_NoneStruct;e=6;break;case 6:return a=l,STACKTOP=d,a;default:assert(0,"bad label: "+e)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;b=a;HEAP[b+20]&=-2;_PyEval_SetProfile(0,0);l(b);b=h(b)!=0?1:2;break;case 1:c=0;b=3;break;case 2:HEAP[__Py_NoneStruct]+=1;c=__Py_NoneStruct;b=3;break;case 3:return a=c;default:assert(0,"bad label: "+b)}},0,function(b){a(b);HEAP[__Py_NoneStruct]+=1;return __Py_NoneStruct},0,function(b){var c;for(c=-1;;)switch(c){case -1:var d;
d=b;c=(HEAP[d+20]&1)!=0?1:2;break;case 1:_PyEval_SetProfile(0,0);c=2;break;case 2:l(d);a(d);c=HEAP[d+24]!=0?3:5;break;case 3:c=HEAP[d+24];HEAP[c]-=1;c=HEAP[c]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[HEAP[d+24]+4]+24]](HEAP[d+24]);c=5;break;case 5:FUNCTION_TABLE[HEAP[HEAP[d+4]+160]](d);return;default:assert(0,"bad label: "+c)}},0,function(a,b,c){var d=STACKTOP;STACKTOP+=20;_memset(d,0,20);var e;for(e=-1;;)switch(e){case -1:var f,g,h,l,m=d,n=d+4,o=d+12,p=d+16;f=a;e=b;g=c;HEAP[m]=0;HEAP[n]=0;HEAP[o]=
1;HEAP[p]=1;e=_PyArg_ParseTupleAndKeywords(e,g,ta,Va,allocate([m,0,0,0,n,0,0,0,o,0,0,0,p,0,0,0],["%struct.PyObject**",0,0,0,"double*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:h=-1;e=11;break;case 2:e=j(f,HEAP[o])<0?4:3;break;case 3:e=k(f,HEAP[p])<0?4:5;break;case 4:h=-1;e=11;break;case 5:l=HEAP[f+24];HEAP[f+24]=HEAP[m];e=HEAP[m]!=0?6:7;break;case 6:HEAP[HEAP[m]]+=1;e=7;break;case 7:e=l!=0?8:10;break;case 8:HEAP[l]-=1;e=HEAP[l]==0?9:10;break;case 9:FUNCTION_TABLE[HEAP[HEAP[l+
4]+24]](l);e=10;break;case 10:HEAP[f+28]=HEAP[n];h=0;e=11;break;case 11:return a=h,STACKTOP=d,a;default:assert(0,"bad label: "+e)}},0,_PyType_GenericAlloc,0,_PyType_GenericNew,0,_PyObject_Free,0]);r.run=q;q();return r});