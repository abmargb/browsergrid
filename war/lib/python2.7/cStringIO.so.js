(function(g){function e(a){var b;for(b=-1;;)switch(b){case -1:var c;b=HEAP[a+8]==0?1:2;break;case 1:_PyErr_SetString(HEAP[_PyExc_ValueError],n);c=0;b=3;break;case 2:c=1;b=3;break;case 3:return a=c;default:assert(0,"bad label: "+b)}}function b(a,b,c){var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k,l;g=a;h=b;j=c;d=e(g)==0?1:2;break;case 1:k=-1;d=11;break;case 2:d=HEAP[g+12]<0?3:4;break;case 3:throw ___assert_fail(u,s,162,C),"Reached an unreachable!";
case 4:d=HEAP[g+16]<0?5:6;break;case 5:throw ___assert_fail(A,s,163,C),"Reached an unreachable!";case 6:var m=HEAP[g+16]-HEAP[g+12];l=m;j<0?(f=6,d=8):(f=6,d=7);break;case 7:var n=l;j>n?(f=7,d=8):(f=7,d=10);break;case 8:j=d=f==7?n:m;d=d<0?9:10;break;case 9:j=0;d=10;break;case 10:HEAP[h]=HEAP[g+8]+HEAP[g+12];HEAP[g+12]=j+HEAP[g+12];k=j;d=11;break;case 11:return a=k;default:assert(0,"bad label: "+d)}}function a(a,b){var c;for(c=-1;;)switch(c){case -1:var d,f,g,h,j,k;d=a;f=b;c=e(d)==0?1:2;break;case 1:g=
-1;c=15;break;case 2:h=HEAP[d+8]+HEAP[d+12];j=HEAP[d+8]+HEAP[d+16];c=4;break;case 3:h+=1;c=4;break;case 4:c=h>=j?6:5;break;case 5:c=HEAP[h]!=10?3:6;break;case 6:c=h<j?7:8;break;case 7:h+=1;c=8;break;case 8:HEAP[f]=HEAP[d+8]+HEAP[d+12];k=0-HEAP[d+8]+h+(0-HEAP[d+12]);c=HEAP[d+12]>2147483647-k?9:10;break;case 9:throw ___assert_fail(D,s,205,R),"Reached an unreachable!";case 10:c=HEAP[d+12]<0?11:12;break;case 11:throw ___assert_fail(u,s,206,R),"Reached an unreachable!";case 12:c=HEAP[d+16]<0?13:14;break;
case 13:throw ___assert_fail(A,s,207,R),"Reached an unreachable!";case 14:HEAP[d+12]=k+HEAP[d+12];g=k;c=15;break;case 15:return c=g;default:assert(0,"bad label: "+c)}}function c(b,c){var d=STACKTOP;STACKTOP+=8;_memset(d,0,8);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k=d,l=d+4;f=b;g=c;HEAP[k]=-1;e=g!=0?1:3;break;case 1:e=_PyArg_ParseTuple(g,M,allocate([k,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?2:3;break;case 2:h=0;e=11;break;case 3:j=e=a(f,l);e=e<0?4:5;break;case 4:h=0;e=11;break;case 5:e=HEAP[k]>=
0?6:8;break;case 6:e=HEAP[k]<j?7:8;break;case 7:HEAP[k]=j-HEAP[k];j-=HEAP[k];HEAP[f+12]-=HEAP[k];e=8;break;case 8:e=HEAP[f+12]<0?9:10;break;case 9:throw ___assert_fail(u,s,227,L),"Reached an unreachable!";case 10:h=_PyString_FromStringAndSize(HEAP[l],j);e=11;break;case 11:return f=h,STACKTOP=d,f;default:assert(0,"bad label: "+e)}}function d(a,b,c){var d;for(d=-1;;)switch(d){case -1:var f,g,h,j,k,l,m;f=a;g=b;h=c;d=e(f)==0?1:2;break;case 1:j=-1;d=17;break;case 2:l=f;k=h+HEAP[l+12];d=HEAP[l+20]<=k?3:
10;break;case 3:HEAP[l+20]*=2;d=HEAP[l+20]<=k?4:7;break;case 4:d=k==2147483646?5:6;break;case 5:throw ___assert_fail(W,s,388,B),"Reached an unreachable!";case 6:HEAP[l+20]=k+1;d=7;break;case 7:m=d=_realloc(HEAP[l+8],HEAP[l+20]);d=d==0?8:9;break;case 8:_PyErr_SetString(HEAP[_PyExc_MemoryError],Y);_free(HEAP[l+8]);HEAP[l+8]=0;HEAP[l+12]=0;HEAP[l+20]=HEAP[l+12];j=-1;d=17;break;case 9:HEAP[l+8]=m;d=10;break;case 10:d=HEAP[l+16]<HEAP[l+12]?11:12;break;case 11:_llvm_memset_p0i8_i32(HEAP[l+8]+HEAP[l+16],
0,HEAP[l+12]-HEAP[l+16],1,0);d=12;break;case 12:_llvm_memcpy_p0i8_p0i8_i32(HEAP[l+8]+HEAP[l+12],g,h,1,0);d=h+HEAP[l+12]==2147483647?13:14;break;case 13:throw ___assert_fail(fa,s,417,B),"Reached an unreachable!";case 14:HEAP[l+12]=h+HEAP[l+12];d=HEAP[l+16]<HEAP[l+12]?15:16;break;case 15:HEAP[l+16]=HEAP[l+12];d=16;break;case 16:j=h;d=17;break;case 17:return a=j;default:assert(0,"bad label: "+d)}}function f(a){var b;for(b=-1;;)switch(b){case -1:var c,d,e;c=a;e=__PyObject_New(Fa);b=e==0?1:2;break;case 1:d=
0;b=7;break;case 2:HEAP[e+12]=0;HEAP[e+16]=0;HEAP[e+24]=0;b=_malloc(c);HEAP[e+8]=b;b=HEAP[e+8]==0?3:6;break;case 3:_PyErr_SetString(HEAP[_PyExc_MemoryError],Y);HEAP[e+20]=0;HEAP[e]-=1;b=HEAP[e]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=5;break;case 5:d=0;b=7;break;case 6:HEAP[e+20]=c;d=e;b=7;break;case 7:return a=d;default:assert(0,"bad label: "+b)}}function h(a){var b=STACKTOP;STACKTOP+=8;_memset(b,0,8);var c;for(c=-1;;)switch(c){case -1:var d,e,f,g=b,h=b+4;d=a;c=_PyObject_AsReadBuffer(d,
g,h)!=0?1:2;break;case 1:_PyErr_Format(HEAP[_PyExc_TypeError],Ra,allocate([HEAP[HEAP[d+4]+12],0,0,0],["i8*",0,0,0],ALLOC_STACK));e=0;c=5;break;case 2:f=__PyObject_New(Ka);c=f==0?3:4;break;case 3:e=0;c=5;break;case 4:HEAP[d]+=1;HEAP[f+8]=HEAP[g];HEAP[f+16]=HEAP[h];HEAP[f+20]=d;HEAP[f+12]=0;e=f;c=5;break;case 5:return a=e,STACKTOP=b,a;default:assert(0,"bad label: "+c)}}function j(){l=allocate([65,32,115,105,109,112,108,101,32,102,97,115,116,32,112,97,114,116,105,97,108,32,83,116,114,105,110,103,73,
79,32,114,101,112,108,97,99,101,109,101,110,116,46,10,10,84,104,105,115,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,97,32,115,105,109,112,108,101,32,117,115,101,102,117,108,32,114,101,112,108,97,99,101,109,101,110,116,32,102,111,114,10,116,104,101,32,83,116,114,105,110,103,73,79,32,109,111,100,117,108,101,32,116,104,97,116,32,105,115,32,119,114,105,116,116,101,110,32,105,110,32,67,46,32,32,73,116,32,100,111,101,115,32,110,111,116,32,112,114,111,118,105,100,101,32,116,104,101,
10,102,117,108,108,32,103,101,110,101,114,97,108,105,116,121,32,111,102,32,83,116,114,105,110,103,73,79,44,32,98,117,116,32,105,116,32,112,114,111,118,105,100,101,115,32,101,110,111,117,103,104,32,102,111,114,32,109,111,115,116,10,97,112,112,108,105,99,97,116,105,111,110,115,32,97,110,100,32,105,115,32,101,115,112,101,99,105,97,108,108,121,32,117,115,101,102,117,108,32,105,110,32,99,111,110,106,117,110,99,116,105,111,110,32,119,105,116,104,32,116,104,101,10,112,105,99,107,108,101,32,109,111,100,117,
108,101,46,10,10,85,115,97,103,101,58,10,10,32,32,102,114,111,109,32,99,83,116,114,105,110,103,73,79,32,105,109,112,111,114,116,32,83,116,114,105,110,103,73,79,10,10,32,32,97,110,95,111,117,116,112,117,116,95,115,116,114,101,97,109,61,83,116,114,105,110,103,73,79,40,41,10,32,32,97,110,95,111,117,116,112,117,116,95,115,116,114,101,97,109,46,119,114,105,116,101,40,115,111,109,101,95,115,116,117,102,102,41,10,32,32,46,46,46,10,32,32,118,97,108,117,101,61,97,110,95,111,117,116,112,117,116,95,115,116,
114,101,97,109,46,103,101,116,118,97,108,117,101,40,41,10,10,32,32,97,110,95,105,110,112,117,116,95,115,116,114,101,97,109,61,83,116,114,105,110,103,73,79,40,97,95,115,116,114,105,110,103,41,10,32,32,115,112,97,109,61,97,110,95,105,110,112,117,116,95,115,116,114,101,97,109,46,114,101,97,100,108,105,110,101,40,41,10,32,32,115,112,97,109,61,97,110,95,105,110,112,117,116,95,115,116,114,101,97,109,46,114,101,97,100,40,53,41,10,32,32,97,110,95,105,110,112,117,116,95,115,116,114,101,97,109,46,115,101,101,
107,40,48,41,32,32,32,32,32,32,32,32,32,32,32,35,32,79,75,44,32,115,116,97,114,116,32,111,118,101,114,10,32,32,115,112,97,109,61,97,110,95,105,110,112,117,116,95,115,116,114,101,97,109,46,114,101,97,100,40,41,32,32,32,32,32,32,32,35,32,97,110,100,32,114,101,97,100,32,105,116,32,97,108,108,10,32,32,10,73,102,32,115,111,109,101,111,110,101,32,101,108,115,101,32,119,97,110,116,115,32,116,111,32,112,114,111,118,105,100,101,32,97,32,109,111,114,101,32,99,111,109,112,108,101,116,101,32,105,109,112,108,
101,109,101,110,116,97,116,105,111,110,44,10,103,111,32,102,111,114,32,105,116,46,32,58,45,41,32,32,10,10,99,83,116,114,105,110,103,73,79,46,99,44,118,32,49,46,50,57,32,49,57,57,57,47,48,54,47,49,53,32,49,52,58,49,48,58,50,55,32,106,105,109,32,69,120,112,10,0],"i8",ALLOC_NORMAL);m=allocate([102,108,117,115,104,40,41,58,32,100,111,101,115,32,110,111,116,104,105,110,103,46,0],"i8",ALLOC_NORMAL);n=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,
108,101,0],"i8",ALLOC_NORMAL);o=allocate([99,108,111,115,101,100,0],"i8",ALLOC_NORMAL);p=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0],"i8",ALLOC_NORMAL);q=allocate(40,["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);r=allocate([103,
101,116,118,97,108,117,101,40,91,117,115,101,95,112,111,115,93,41,32,45,45,32,71,101,116,32,116,104,101,32,115,116,114,105,110,103,32,118,97,108,117,101,46,10,73,102,32,117,115,101,95,112,111,115,32,105,115,32,115,112,101,99,105,102,105,101,100,32,97,110,100,32,105,115,32,97,32,116,114,117,101,32,118,97,108,117,101,44,32,116,104,101,110,32,116,104,101,32,115,116,114,105,110,103,32,114,101,116,117,114,110,101,100,10,119,105,108,108,32,105,110,99,108,117,100,101,32,111,110,108,121,32,116,104,101,32,
116,101,120,116,32,117,112,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,10,0],"i8",ALLOC_NORMAL);u=allocate([40,40,73,79,111,98,106,101,99,116,42,41,40,115,101,108,102,41,41,45,62,112,111,115,32,62,61,32,48,0],"i8",ALLOC_NORMAL);s=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,99,83,116,114,105,110,103,73,79,46,99,0],"i8",ALLOC_NORMAL);t=allocate([73,79,95,99,103,101,116,118,97,108,0],"i8",ALLOC_NORMAL);
v=allocate([103,101,116,118,97,108,0],"i8",ALLOC_NORMAL);w=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0],"i8",ALLOC_NORMAL);x=allocate([73,79,95,103,101,116,118,97,108,0],"i8",ALLOC_NORMAL);y=allocate([105,115,97,116,116,121,40,41,58,32,97,108,119,97,121,115,32,114,101,116,117,114,110,115,32,48,0],"i8",ALLOC_NORMAL);z=allocate([114,101,97,100,40,91,115,93,41,32,45,45,32,82,101,97,100,32,115,32,99,104,97,114,97,99,116,101,114,115,44,32,111,114,32,116,104,101,32,114,101,115,116,32,111,
102,32,116,104,101,32,115,116,114,105,110,103,0],"i8",ALLOC_NORMAL);C=allocate([73,79,95,99,114,101,97,100,0],"i8",ALLOC_NORMAL);A=allocate([40,40,73,79,111,98,106,101,99,116,42,41,40,115,101,108,102,41,41,45,62,115,116,114,105,110,103,95,115,105,122,101,32,62,61,32,48,0],"i8",ALLOC_NORMAL);G=allocate([124,110,58,114,101,97,100,0],"i8",ALLOC_NORMAL);E=allocate([114,101,97,100,108,105,110,101,40,41,32,45,45,32,82,101,97,100,32,111,110,101,32,108,105,110,101,0],"i8",ALLOC_NORMAL);D=allocate([40,40,
73,79,111,98,106,101,99,116,42,41,40,115,101,108,102,41,41,45,62,112,111,115,32,60,61,32,40,40,80,121,95,115,115,105,122,101,95,116,41,40,40,40,115,105,122,101,95,116,41,45,49,41,62,62,49,41,41,32,45,32,108,0],"i8",ALLOC_NORMAL);R=allocate([73,79,95,99,114,101,97,100,108,105,110,101,0],"i8",ALLOC_NORMAL);M=allocate([124,105,58,114,101,97,100,108,105,110,101,0],"i8",ALLOC_NORMAL);L=allocate([73,79,95,114,101,97,100,108,105,110,101,0],"i8",ALLOC_NORMAL);I=allocate([114,101,97,100,108,105,110,101,115,
40,41,32,45,45,32,82,101,97,100,32,97,108,108,32,108,105,110,101,115,0],"i8",ALLOC_NORMAL);J=allocate([124,105,58,114,101,97,100,108,105,110,101,115,0],"i8",ALLOC_NORMAL);F=allocate([114,101,115,101,116,40,41,32,45,45,32,82,101,115,101,116,32,116,104,101,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,116,111,32,116,104,101,32,98,101,103,105,110,110,105,110,103,0],"i8",ALLOC_NORMAL);V=allocate([116,101,108,108,40,41,32,45,45,32,103,101,116,32,116,104,101,32,99,117,114,114,101,110,116,32,
112,111,115,105,116,105,111,110,46,0],"i8",ALLOC_NORMAL);Q=allocate([73,79,95,116,101,108,108,0],"i8",ALLOC_NORMAL);Z=allocate([116,114,117,110,99,97,116,101,40,41,58,32,116,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,97,116,32,116,104,101,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,46,0],"i8",ALLOC_NORMAL);K=allocate([124,110,58,116,114,117,110,99,97,116,101,0],"i8",ALLOC_NORMAL);N=allocate([115,101,101,107,40,112,111,115,105,116,105,111,110,41,32,32,32,32,
32,32,32,45,45,32,115,101,116,32,116,104,101,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,10,115,101,101,107,40,112,111,115,105,116,105,111,110,44,32,109,111,100,101,41,32,45,45,32,109,111,100,101,32,48,58,32,97,98,115,111,108,117,116,101,59,32,49,58,32,114,101,108,97,116,105,118,101,59,32,50,58,32,114,101,108,97,116,105,118,101,32,116,111,32,69,79,70,0],"i8",ALLOC_NORMAL);H=allocate([110,124,105,58,115,101,101,107,0],"i8",ALLOC_NORMAL);ba=allocate([119,114,105,116,101,40,115,
41,32,45,45,32,87,114,105,116,101,32,97,32,115,116,114,105,110,103,32,116,111,32,116,104,101,32,102,105,108,101,10,10,78,111,116,101,32,40,104,97,99,107,58,41,32,119,114,105,116,105,110,103,32,78,111,110,101,32,114,101,115,101,116,115,32,116,104,101,32,98,117,102,102,101,114,0],"i8",ALLOC_NORMAL);W=allocate([110,101,119,108,32,43,32,49,32,60,32,50,49,52,55,52,56,51,54,52,55,0],"i8",ALLOC_NORMAL);B=allocate([79,95,99,119,114,105,116,101,0],"i8",ALLOC_NORMAL);Y=allocate([111,117,116,32,111,102,32,109,
101,109,111,114,121,0],"i8",ALLOC_NORMAL);fa=allocate([111,115,101,108,102,45,62,112,111,115,32,43,32,108,32,60,32,50,49,52,55,52,56,51,54,52,55,0],"i8",ALLOC_NORMAL);ha=allocate([116,35,58,119,114,105,116,101,0],"i8",ALLOC_NORMAL);la=allocate([99,108,111,115,101,40,41,58,32,101,120,112,108,105,99,105,116,108,121,32,114,101,108,101,97,115,101,32,114,101,115,111,117,114,99,101,115,32,104,101,108,100,46,0],"i8",ALLOC_NORMAL);ra=allocate([119,114,105,116,101,108,105,110,101,115,40,115,101,113,117,101,
110,99,101,95,111,102,95,115,116,114,105,110,103,115,41,32,45,62,32,78,111,110,101,46,32,32,87,114,105,116,101,32,116,104,101,32,115,116,114,105,110,103,115,32,116,111,32,116,104,101,32,102,105,108,101,46,10,10,78,111,116,101,32,116,104,97,116,32,110,101,119,108,105,110,101,115,32,97,114,101,32,110,111,116,32,97,100,100,101,100,46,32,32,84,104,101,32,115,101,113,117,101,110,99,101,32,99,97,110,32,98,101,32,97,110,121,32,105,116,101,114,97,98,108,101,32,111,98,106,101,99,116,10,112,114,111,100,117,
99,105,110,103,32,115,116,114,105,110,103,115,46,32,84,104,105,115,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,99,97,108,108,105,110,103,32,119,114,105,116,101,40,41,32,102,111,114,32,101,97,99,104,32,115,116,114,105,110,103,46,0],"i8",ALLOC_NORMAL);ya=allocate([102,108,117,115,104,0],"i8",ALLOC_NORMAL);Da=allocate([103,101,116,118,97,108,117,101,0],"i8",ALLOC_NORMAL);Ua=allocate([105,115,97,116,116,121,0],"i8",ALLOC_NORMAL);Na=allocate([114,101,97,100,0],"i8",ALLOC_NORMAL);
Pa=allocate([114,101,97,100,108,105,110,101,0],"i8",ALLOC_NORMAL);wa=allocate([114,101,97,100,108,105,110,101,115,0],"i8",ALLOC_NORMAL);Ya=allocate([114,101,115,101,116,0],"i8",ALLOC_NORMAL);Ha=allocate([115,101,101,107,0],"i8",ALLOC_NORMAL);ta=allocate([116,101,108,108,0],"i8",ALLOC_NORMAL);Va=allocate([116,114,117,110,99,97,116,101,0],"i8",ALLOC_NORMAL);Ia=allocate([99,108,111,115,101,0],"i8",ALLOC_NORMAL);Wa=allocate([119,114,105,116,101,0],"i8",ALLOC_NORMAL);ia=allocate([119,114,105,116,101,108,
105,110,101,115,0],"i8",ALLOC_NORMAL);Ba=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",
0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,
0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",
0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Xa=allocate([115,111,102,116,115,112,97,99,101,0],"i8",ALLOC_NORMAL);
Ta=allocate([102,108,97,103,32,105,110,100,105,99,97,116,105,110,103,32,116,104,97,116,32,97,32,115,112,97,99,101,32,110,101,101,100,115,32,116,111,32,98,101,32,112,114,105,110,116,101,100,59,32,117,115,101,100,32,98,121,32,112,114,105,110,116,0],"i8",ALLOC_NORMAL);Ea=allocate([0,0,0,0,1,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8"],ALLOC_NORMAL);Ga=allocate([83,105,109,112,108,101,32,116,121,112,101,32,102,111,114,32,111,117,116,112,117,116,32,116,111,32,115,116,114,105,110,103,115,46,0],"i8",ALLOC_NORMAL);ka=allocate([99,83,116,114,105,110,103,73,79,46,83,116,114,105,110,103,79,0],"i8",ALLOC_NORMAL);Fa=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131563,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",
0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);ma=allocate([0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,
0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",
0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);La=allocate([83,105,109,112,108,101,32,116,121,112,101,32,102,111,114,32,116,114,101,97,116,105,110,103,32,115,116,114,105,110,103,115,
32,97,115,32,105,110,112,117,116,32,102,105,108,101,32,115,116,114,101,97,109,115,0],"i8",ALLOC_NORMAL);Za=allocate([99,83,116,114,105,110,103,73,79,46,83,116,114,105,110,103,73,0],"i8",ALLOC_NORMAL);Ka=allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131563,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",
0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,
"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",
"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);Ra=allocate([101,120,112,101,99,116,101,100,32,114,101,97,100,32,98,117,102,102,101,114,44,32,37,46,50,48,48,115,32,102,111,117,110,100,0],"i8",ALLOC_NORMAL);$a=allocate([83,116,114,105,110,103,73,79,40,91,115,93,41,32,45,45,32,82,101,116,117,114,110,32,97,32,83,116,114,105,110,103,73,79,45,108,105,107,101,32,115,116,114,101,97,109,32,102,111,114,32,
114,101,97,100,105,110,103,32,111,114,32,119,114,105,116,105,110,103,0],"i8",ALLOC_NORMAL);Ja=allocate([83,116,114,105,110,103,73,79,0],"i8",ALLOC_NORMAL);ja=allocate([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"],ALLOC_NORMAL);ua=allocate(32,["i32 (%struct.PyObject*, i8**, i32)*",
0,0,0,"i32 (%struct.PyObject*, i8**)*",0,0,0,"i32 (%struct.PyObject*, i8*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct._typeobject*",0,0,0,"%struct._typeobject*",0,0,0],ALLOC_NORMAL);bb=allocate([99,83,116,114,105,110,103,73,79,0],"i8",ALLOC_NORMAL);qa=allocate([99,83,116,114,105,110,103,73,79,46,99,83,116,114,105,110,103,73,79,95,67,65,80,73,0],"i8",ALLOC_NORMAL);P=allocate([99,83,116,114,105,
110,103,73,79,95,67,65,80,73,0],"i8",ALLOC_NORMAL);hb=allocate([73,110,112,117,116,84,121,112,101,0],"i8",ALLOC_NORMAL);Qa=allocate([79,117,116,112,117,116,84,121,112,101,0],"i8",ALLOC_NORMAL);HEAP[q]=o;HEAP[q+4]=g+2;HEAP[q+12]=p;HEAP[Ba]=ya;HEAP[Ba+4]=g+4;HEAP[Ba+12]=m;HEAP[Ba+16]=Da;HEAP[Ba+20]=g+6;HEAP[Ba+28]=r;HEAP[Ba+32]=Ua;HEAP[Ba+36]=g+8;HEAP[Ba+44]=y;HEAP[Ba+48]=Na;HEAP[Ba+52]=g+10;HEAP[Ba+60]=z;HEAP[Ba+64]=Pa;HEAP[Ba+68]=g+12;HEAP[Ba+76]=E;HEAP[Ba+80]=wa;HEAP[Ba+84]=g+14;HEAP[Ba+92]=I;HEAP[Ba+
96]=Ya;HEAP[Ba+100]=g+16;HEAP[Ba+108]=F;HEAP[Ba+112]=Ha;HEAP[Ba+116]=g+18;HEAP[Ba+124]=N;HEAP[Ba+128]=ta;HEAP[Ba+132]=g+20;HEAP[Ba+140]=V;HEAP[Ba+144]=Va;HEAP[Ba+148]=g+22;HEAP[Ba+156]=Z;HEAP[Ba+160]=Ia;HEAP[Ba+164]=g+24;HEAP[Ba+172]=la;HEAP[Ba+176]=Wa;HEAP[Ba+180]=g+26;HEAP[Ba+188]=ba;HEAP[Ba+192]=ia;HEAP[Ba+196]=g+28;HEAP[Ba+204]=ra;HEAP[Ea]=Xa;HEAP[Ea+16]=Ta;HEAP[Fa+12]=ka;HEAP[Fa+24]=g+30;HEAP[Fa+88]=Ga;HEAP[Fa+108]=g+32;HEAP[Fa+112]=g+34;HEAP[Fa+116]=Ba;HEAP[Fa+120]=Ea;HEAP[Fa+124]=q;HEAP[ma]=
ya;HEAP[ma+4]=g+4;HEAP[ma+12]=m;HEAP[ma+16]=Da;HEAP[ma+20]=g+6;HEAP[ma+28]=r;HEAP[ma+32]=Ua;HEAP[ma+36]=g+8;HEAP[ma+44]=y;HEAP[ma+48]=Na;HEAP[ma+52]=g+10;HEAP[ma+60]=z;HEAP[ma+64]=Pa;HEAP[ma+68]=g+12;HEAP[ma+76]=E;HEAP[ma+80]=wa;HEAP[ma+84]=g+14;HEAP[ma+92]=I;HEAP[ma+96]=Ya;HEAP[ma+100]=g+16;HEAP[ma+108]=F;HEAP[ma+112]=Ha;HEAP[ma+116]=g+18;HEAP[ma+124]=N;HEAP[ma+128]=ta;HEAP[ma+132]=g+20;HEAP[ma+140]=V;HEAP[ma+144]=Va;HEAP[ma+148]=g+22;HEAP[ma+156]=Z;HEAP[ma+160]=Ia;HEAP[ma+164]=g+36;HEAP[ma+172]=
la;HEAP[Ka+12]=Za;HEAP[Ka+24]=g+38;HEAP[Ka+88]=La;HEAP[Ka+108]=g+32;HEAP[Ka+112]=g+34;HEAP[Ka+116]=ma;HEAP[Ka+124]=q;HEAP[ja]=Ja;HEAP[ja+4]=g+40;HEAP[ja+12]=$a;HEAP[ua]=g+42;HEAP[ua+4]=g+44;HEAP[ua+8]=g+46;HEAP[ua+12]=g+48;HEAP[ua+16]=g+50;HEAP[ua+20]=g+52;HEAP[ua+24]=Ka;HEAP[ua+28]=Fa}var k={arguments:[]},l,m,n,o,p,q,r,u,s,t,v,w,x,y,z,C,A,G,E,D,R,M,L,I,J,F,V,Q,Z,K,N,H,ba,W,B,Y,fa,ha,la,ra,ya,Da,Ua,Na,Pa,wa,Ya,Ha,ta,Va,Ia,Wa,ia,Ba,Xa,Ta,Ea,Ga,ka,Fa,ma,La,Za,Ka,Ra,$a,Ja,ja,ua,bb,qa,P,hb,Qa;k._initcStringIO=
function(){var a;for(a=-1;;)switch(a){case -1:var b,c,d;b=_Py_InitModule4(bb,ja,l,0,1013);a=b==0?7:1;break;case 1:c=_PyModule_GetDict(b);HEAP[Ka+4]=_PyType_Type;HEAP[Fa+4]=_PyType_Type;a=_PyType_Ready(Fa)<0?7:2;break;case 2:a=_PyType_Ready(Ka)<0?7:3;break;case 3:d=_PyCapsule_New(ua,qa,0);_PyDict_SetItemString(c,P,d);a=d!=0?4:6;break;case 4:HEAP[d]-=1;a=HEAP[d]==0?5:6;break;case 5:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);a=6;break;case 6:_PyDict_SetItemString(c,hb,Ka);_PyDict_SetItemString(c,Qa,Fa);a=
7;break;case 7:return;default:assert(0,"bad label: "+a)}};FUNCTION_TABLE=FUNCTION_TABLE.concat([0,0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;b=a;c=__Py_ZeroStruct;b=HEAP[b+8]==0?1:2;break;case 1:c=__Py_TrueStruct;b=2;break;case 2:return HEAP[c]+=1,a=c;default:assert(0,"bad label: "+b)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;b=e(a)==0?1:2;break;case 1:c=0;b=3;break;case 2:HEAP[__Py_NoneStruct]+=1;c=__Py_NoneStruct;b=3;break;case 3:return a=c;default:assert(0,"bad label: "+
b)}},0,function(a,b){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var f,g,h,j=c,k;f=a;g=b;HEAP[j]=__Py_NoneStruct;d=e(f)==0?1:2;break;case 1:h=0;d=11;break;case 2:d=_PyArg_UnpackTuple(g,v,0,1,allocate([j,0,0,0],["%struct.PyObject**",0,0,0],ALLOC_STACK))==0?3:4;break;case 3:h=0;d=11;break;case 4:d=_PyObject_IsTrue(HEAP[j]);var l=f;d=d!=0?5:7;break;case 5:k=HEAP[l+12];d=HEAP[f+16]<k?6:8;break;case 6:k=HEAP[f+16];d=8;break;case 7:k=HEAP[l+16];d=8;break;case 8:d=HEAP[f+
12]<0?9:10;break;case 9:throw ___assert_fail(w,s,141,x),"Reached an unreachable!";case 10:h=_PyString_FromStringAndSize(HEAP[f+8],k);d=11;break;case 11:return f=h,STACKTOP=c,f;default:assert(0,"bad label: "+d)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;b=e(a)==0?1:2;break;case 1:c=0;b=3;break;case 2:HEAP[__Py_ZeroStruct]+=1;c=__Py_ZeroStruct;b=3;break;case 3:return a=c;default:assert(0,"bad label: "+b)}},0,function(a,c){var d=STACKTOP;STACKTOP+=8;_memset(d,0,8);var e;for(e=-1;;)switch(e){case -1:var f,
g,h=d,j=d+4;f=a;e=c;HEAP[h]=-1;HEAP[j]=0;e=_PyArg_ParseTuple(e,G,allocate([h,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=5;break;case 2:e=b(f,j,HEAP[h]);HEAP[h]=e;e=HEAP[h]<0?3:4;break;case 3:g=0;e=5;break;case 4:g=_PyString_FromStringAndSize(HEAP[j],HEAP[h]);e=5;break;case 5:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,c,0,function(b,c){var d=STACKTOP;STACKTOP+=8;_memset(d,0,8);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j=d,k,l,m=d+4,n;f=b;e=c;n=HEAP[m]=0;e=_PyArg_ParseTuple(e,
J,allocate([m,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=18;break;case 2:k=_PyList_New(0);e=k==0?3:4;break;case 3:g=0;e=18;break;case 4:h=e=a(f,j);e=e<0?15:5;break;case 5:e=h==0?14:6;break;case 6:l=_PyString_FromStringAndSize(HEAP[j],h);e=l==0?15:7;break;case 7:e=_PyList_Append(k,l)==-1;HEAP[l]-=1;var o=HEAP[l]==0;e=e?8:10;break;case 8:e=o?9:15;break;case 9:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=15;break;case 10:e=o?11:12;break;case 11:FUNCTION_TABLE[HEAP[HEAP[l+4]+24]](l);e=12;
break;case 12:n=h+n;e=HEAP[m]>0?13:4;break;case 13:e=n>=HEAP[m]?14:4;break;case 14:g=k;e=18;break;case 15:HEAP[k]-=1;e=HEAP[k]==0?16:17;break;case 16:FUNCTION_TABLE[HEAP[HEAP[k+4]+24]](k);e=17;break;case 17:g=0;e=18;break;case 18:return f=g,STACKTOP=d,f;default:assert(0,"bad label: "+e)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=e(c)==0?1:2;break;case 1:d=0;b=3;break;case 2:HEAP[c+12]=0;HEAP[__Py_NoneStruct]+=1;d=__Py_NoneStruct;b=3;break;case 3:return a=d;default:assert(0,"bad label: "+
b)}},0,function(a,b){var c=STACKTOP;STACKTOP+=8;_memset(c,0,8);var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k=c,l=c+4;g=a;h=b;HEAP[l]=0;d=e(g)==0?1:2;break;case 1:j=0;d=12;break;case 2:d=_PyArg_ParseTuple(h,H,allocate([k,0,0,0,l,0,0,0],["i32*",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?3:4;break;case 3:j=0;d=12;break;case 4:d=HEAP[l]==2?5:6;break;case 5:var m=HEAP[k]+HEAP[g+16];HEAP[k]=m;f=5;d=9;break;case 6:d=HEAP[l]==1?7:8;break;case 7:var n=HEAP[k]+HEAP[g+12];HEAP[k]=n;f=7;d=9;break;case 8:var o=
HEAP[k],f=8;d=9;break;case 9:d=(f==8?o:f==7?n:m)<0?10:11;break;case 10:HEAP[k]=0;d=11;break;case 11:HEAP[g+12]=HEAP[k];HEAP[__Py_NoneStruct]+=1;j=__Py_NoneStruct;d=12;break;case 12:return d=j,STACKTOP=c,d;default:assert(0,"bad label: "+d)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=e(c)==0?1:2;break;case 1:d=0;b=5;break;case 2:b=HEAP[c+12]<0?3:4;break;case 3:throw ___assert_fail(w,s,290,Q),"Reached an unreachable!";case 4:d=_PyInt_FromSsize_t(HEAP[c+12]);b=5;break;case 5:return a=
d;default:assert(0,"bad label: "+b)}},0,function(a,b){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d,f=null;for(d=-1;;)switch(d){case -1:var g,h,j,k=c;g=a;h=b;HEAP[k]=-1;d=e(g)==0?1:2;break;case 1:j=0;d=12;break;case 2:d=_PyArg_ParseTuple(h,K,allocate([k,0,0,0],["i32*",0,0,0],ALLOC_STACK))==0?3:4;break;case 3:j=0;d=12;break;case 4:d=_PyTuple_Size(h)==0?5:6;break;case 5:var l=HEAP[g+12];HEAP[k]=l;f=5;d=7;break;case 6:var m=HEAP[k],f=6;d=7;break;case 7:d=(f==6?m:l)<0?8:9;break;case 8:d=___errno_location();
HEAP[d]=22;_PyErr_SetFromErrno(HEAP[_PyExc_IOError]);j=0;d=12;break;case 9:d=HEAP[g+16]>HEAP[k]?10:11;break;case 10:HEAP[g+16]=HEAP[k];d=11;break;case 11:HEAP[g+12]=HEAP[g+16];HEAP[__Py_NoneStruct]+=1;j=__Py_NoneStruct;d=12;break;case 12:return f=j,STACKTOP=c,f;default:assert(0,"bad label: "+d)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+8]!=0?1:2;break;case 1:_free(HEAP[c+8]);b=2;break;case 2:return HEAP[c+8]=0,HEAP[c+20]=0,HEAP[c+16]=HEAP[c+20],HEAP[c+12]=HEAP[c+16],HEAP[__Py_NoneStruct]+=
1,a=__Py_NoneStruct;default:assert(0,"bad label: "+b)}},0,function(a,b){var c=STACKTOP;STACKTOP+=8;_memset(c,0,8);var e;for(e=-1;;)switch(e){case -1:var f,g,h=c,j=c+4;f=a;e=_PyArg_ParseTuple(b,ha,allocate([h,0,0,0,j,0,0,0],["i8**",0,0,0,"i32*",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:g=0;e=5;break;case 2:e=d(f,HEAP[h],HEAP[j])<0?3:4;break;case 3:g=0;e=5;break;case 4:HEAP[__Py_NoneStruct]+=1;g=__Py_NoneStruct;e=5;break;case 5:return e=g,STACKTOP=c,e;default:assert(0,"bad label: "+e)}},0,function(a,
b){var c=STACKTOP;STACKTOP+=8;_memset(c,0,8);var e;for(e=-1;;)switch(e){case -1:var f,g,h,j,k=c,l=c+4;f=a;h=_PyObject_GetIter(b);e=h==0?1:16;break;case 1:g=0;e=22;break;case 2:e=_PyString_AsStringAndSize(j,l,k)==-1?3:8;break;case 3:HEAP[h]-=1;e=HEAP[h]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);e=5;break;case 5:HEAP[j]-=1;e=HEAP[j]==0?6:7;break;case 6:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);e=7;break;case 7:g=0;e=22;break;case 8:e=d(f,HEAP[l],HEAP[k])==-1?9:14;break;case 9:HEAP[h]-=1;
e=HEAP[h]==0?10:11;break;case 10:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);e=11;break;case 11:HEAP[j]-=1;e=HEAP[j]==0?12:13;break;case 12:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);e=13;break;case 13:g=0;e=22;break;case 14:HEAP[j]-=1;e=HEAP[j]==0?15:16;break;case 15:FUNCTION_TABLE[HEAP[HEAP[j+4]+24]](j);e=16;break;case 16:j=e=_PyIter_Next(h);e=e!=0?2:17;break;case 17:HEAP[h]-=1;e=HEAP[h]==0?18:19;break;case 18:FUNCTION_TABLE[HEAP[HEAP[h+4]+24]](h);e=19;break;case 19:e=_PyErr_Occurred()!=0?20:21;break;case 20:g=
0;e=22;break;case 21:HEAP[__Py_NoneStruct]+=1;g=__Py_NoneStruct;e=22;break;case 22:return f=g,STACKTOP=c,f;default:assert(0,"bad label: "+e)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+8]!=0?1:2;break;case 1:_free(HEAP[c+8]);b=2;break;case 2:_PyObject_Free(c);return;default:assert(0,"bad label: "+b)}},0,_PyObject_SelfIter,0,function(a){var b;for(b=-1;;)switch(b){case -1:var d,e;e=c(a,0);b=e==0?1:2;break;case 1:d=0;b=7;break;case 2:var f=e;b=HEAP[e+8]==0?3:6;break;case 3:HEAP[e]=
HEAP[f]-1;b=HEAP[e]==0?4:5;break;case 4:FUNCTION_TABLE[HEAP[HEAP[e+4]+24]](e);b=5;break;case 5:_PyErr_SetNone(HEAP[_PyExc_StopIteration]);d=0;b=7;break;case 6:d=f;b=7;break;case 7:return a=d;default:assert(0,"bad label: "+b)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=HEAP[c+20]!=0?1:3;break;case 1:d=HEAP[c+20];HEAP[c+20]=0;HEAP[d]-=1;b=HEAP[d]==0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[d+4]+24]](d);b=3;break;case 3:return HEAP[c+8]=0,HEAP[c+16]=0,HEAP[c+12]=HEAP[c+16],HEAP[__Py_NoneStruct]+=
1,a=__Py_NoneStruct;default:assert(0,"bad label: "+b)}},0,function(a){var b;for(b=-1;;)switch(b){case -1:var c;c=a;b=HEAP[c+20]!=0?1:3;break;case 1:b=HEAP[c+20];HEAP[b]-=1;b=HEAP[b]==0?2:3;break;case 2:FUNCTION_TABLE[HEAP[HEAP[HEAP[c+20]+4]+24]](HEAP[c+20]);b=3;break;case 3:_PyObject_Free(c);return;default:assert(0,"bad label: "+b)}},0,function(a,b){var c=STACKTOP;STACKTOP+=4;_memset(c,0,4);var d;for(d=-1;;)switch(d){case -1:var e,g=c;d=b;HEAP[g]=0;d=_PyArg_UnpackTuple(d,Ja,0,1,allocate([g,0,0,0],
["%struct.PyObject**",0,0,0],ALLOC_STACK))==0?1:2;break;case 1:e=0;d=5;break;case 2:d=HEAP[g]!=0?3:4;break;case 3:e=h(HEAP[g]);d=5;break;case 4:e=f(128);d=5;break;case 5:return STACKTOP=c,e;default:assert(0,"bad label: "+d)}},0,b,0,a,0,d,0,function(a){var b;for(b=-1;;)switch(b){case -1:var c,d;c=a;b=e(c)==0?1:2;break;case 1:d=0;b=5;break;case 2:b=HEAP[c+12]<0?3:4;break;case 3:throw ___assert_fail(u,s,122,t),"Reached an unreachable!";case 4:d=_PyString_FromStringAndSize(HEAP[c+8],HEAP[c+12]);b=5;break;
case 5:return a=d;default:assert(0,"bad label: "+b)}},0,f,0,h,0]);k.run=j;j();return k});